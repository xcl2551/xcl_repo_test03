server:
  port: ${PORT:32201}
  servlet:
     context-path: /purchasetime
spring:
 jackson:
     default-property-inclusion: ALWAYS
     date-format: yyyy-MM-dd HH:mm:ss
     time-zone: GMT+8
 application:
     name: scda-service-purchasetime #指定实例id
 datasource:
     druid:
           url: jdbc:oracle:thin:@(DESCRIPTION =(FAILOVER = ON)(ADDRESS_LIST =(ADDRESS = (PROTOCOL = TCP)(HOST = 10.9.70.162  )(PORT = 1521))(ADDRESS = (PROTOCOL = TCP)(HOST = 10.9.70.164 )(PORT = 1521)))(CONNECT_DATA =(SERVICE_NAME = mmsdb)(failover_mode =(type = session))))
           username: scda
           password: Scda2019#
           driverClassName: oracle.jdbc.OracleDriver
           initialSize: 5  #初始建立连接数量
           minIdle: 5  #最小连接数量
           maxActive: 20 #最大连接数量
           maxWait: 10000  #获取连接最大等待时间，毫秒
           testOnBorrow: true #申请连接时检测连接是否有效
           testOnReturn: false #归还连接时检测连接是否有效
           timeBetweenEvictionRunsMillis: 60000 #配置间隔检测连接是否有效的时间（单位是毫秒）
           minEvictableIdleTimeMillis: 300000  #连接在连接池的最小生存时间（毫秒）
     type: com.alibaba.druid.pool.DruidDataSource

mybatis:
 type-aliases-package: com.pccw.framework.domain.purchasetime
 mapper-locations: classpath:com/pccw/purchasetime/mapper/*Mapper.xml


eureka:
  client:
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://localhost:8301/eureka/,http://localhost:8302/eureka/}
  instance:
    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中
    ip-address: ${IP_ADDRESS:127.0.0.1}
    instance-id: ${spring.application.name}:${server.port} #指定实例id

ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间
pagehelper:
  helper-dialect:  oracle
  reasonable: true
  support-methods-arguments: true
  params: count=countSql



